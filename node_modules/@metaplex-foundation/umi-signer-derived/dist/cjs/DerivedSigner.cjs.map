{"version":3,"file":"DerivedSigner.cjs","sources":["../../src/DerivedSigner.ts"],"sourcesContent":["import {\n  Context,\n  createSignerFromKeypair,\n  isKeypairSigner,\n  KeypairSigner,\n  Signer,\n  utf8,\n} from '@metaplex-foundation/umi';\nimport { sha512 } from '@noble/hashes/sha512';\n\nexport type DerivedSigner = KeypairSigner & {\n  readonly originalSigner: Signer;\n};\n\nexport const createDerivedSigner = async (\n  context: Pick<Context, 'eddsa'>,\n  originalSigner: Signer,\n  message: string | Uint8Array\n): Promise<DerivedSigner> => {\n  const messageBytes =\n    typeof message === 'string' ? utf8.serialize(message) : message;\n  const signature = await originalSigner.signMessage(messageBytes);\n  const seeds = sha512(signature).slice(0, 32);\n  const keypair = context.eddsa.createKeypairFromSeed(seeds);\n\n  return {\n    ...createSignerFromKeypair(context, keypair),\n    originalSigner,\n  };\n};\n\nexport const isDerivedKeypair = (\n  signer: Signer & { secretKey?: Uint8Array; originalSigner?: Signer }\n): signer is DerivedSigner =>\n  signer.originalSigner !== undefined && isKeypairSigner(signer);\n"],"names":["createDerivedSigner","context","originalSigner","message","messageBytes","utf8","serialize","signature","signMessage","seeds","sha512","slice","keypair","eddsa","createKeypairFromSeed","createSignerFromKeypair","isDerivedKeypair","signer","undefined","isKeypairSigner"],"mappings":";;;;;;;AAcO,MAAMA,mBAAmB,GAAG,OACjCC,OAA+B,EAC/BC,cAAsB,EACtBC,OAA4B,KACD;AAC3B,EAAA,MAAMC,YAAY,GAChB,OAAOD,OAAO,KAAK,QAAQ,GAAGE,QAAI,CAACC,SAAS,CAACH,OAAO,CAAC,GAAGA,OAAO,CAAA;EACjE,MAAMI,SAAS,GAAG,MAAML,cAAc,CAACM,WAAW,CAACJ,YAAY,CAAC,CAAA;AAChE,EAAA,MAAMK,KAAK,GAAGC,aAAM,CAACH,SAAS,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;EAC5C,MAAMC,OAAO,GAAGX,OAAO,CAACY,KAAK,CAACC,qBAAqB,CAACL,KAAK,CAAC,CAAA;EAE1D,OAAO;AACL,IAAA,GAAGM,2BAAuB,CAACd,OAAO,EAAEW,OAAO,CAAC;AAC5CV,IAAAA,cAAAA;GACD,CAAA;AACH,EAAC;AAEYc,MAAAA,gBAAgB,GAC3BC,MAAoE,IAEpEA,MAAM,CAACf,cAAc,KAAKgB,SAAS,IAAIC,mBAAe,CAACF,MAAM;;;;;"}