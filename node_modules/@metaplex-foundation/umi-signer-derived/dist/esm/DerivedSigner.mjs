import { utf8, createSignerFromKeypair, isKeypairSigner } from '@metaplex-foundation/umi';
import { sha512 } from '@noble/hashes/sha512';

const createDerivedSigner = async (context, originalSigner, message) => {
  const messageBytes = typeof message === 'string' ? utf8.serialize(message) : message;
  const signature = await originalSigner.signMessage(messageBytes);
  const seeds = sha512(signature).slice(0, 32);
  const keypair = context.eddsa.createKeypairFromSeed(seeds);
  return {
    ...createSignerFromKeypair(context, keypair),
    originalSigner
  };
};
const isDerivedKeypair = signer => signer.originalSigner !== undefined && isKeypairSigner(signer);

export { createDerivedSigner, isDerivedKeypair };
//# sourceMappingURL=DerivedSigner.mjs.map
